[General]
network = AirTrafficControl
cpu-time-limit = 300s
debug-on-errors = true
simtime-resolution = ms
ned-path = ./..
**.airspace.totalSamples = 1000000  #Number of statistic samples to collect before ending the simulation (max 2^31-1, otherwise an overflow occurs due to the NED "int" type)
result-dir = /media/luigi/88A4ABD5A4ABC3D2/results

#RNG Management
num-rngs = 4
airspace.rng-0 = 0			#seed for the airplanes interarrival rate	(nextArrival)
airspace.rng-1 = 1			#seed for the airplanes landing time		(nextLandingTime)
parkingarea.rng-0 = 2		#seed for the airplanes parking time		(nextParkingTime)
parkingarea.rng-1 = 3  		#seed for the airplanes takeoff time		(nextTakeoffTime)
repeat = 10					#number of repetitions of the same run with different seeds
seed-set = ${repetition}	#Use a different seed for each repetition

**.airspace.interArrivalTime = ${iat = 15..30 step 3}
**.airspace.landingTime = ${lt = 15..30 step 3}
**.parkingarea.takeoffTime = ${tot = 15..30 step 3}
**.parkingarea.parkingTime = ${pt = 15..30 step 3}
warmup-period = ${iat}s

[Config DeterministicRegime]
#Constant Interarrivals
# Note: these variables could be not initialized here since they are default value in NED file
**.airspace.isInterArrivalTimeRandom = false
**.airspace.isLandingTimeRandom = false
**.parkingarea.isParkingTimeRandom = false
**.parkingarea.isTakeoffTimeRandom = false

[Config ExponentialRegime]
#Constant Interarrivals
# Note: these variables could be not initialized here since they are default value in NED file
**.airspace.isInterArrivalTimeRandom = true
**.airspace.isLandingTimeRandom = true
**.parkingarea.isParkingTimeRandom = true
**.parkingarea.isTakeoffTimeRandom = true

[Config DeterministicRegimeOverloaded]
extends = DeterministicRegime
description = "Deterministic regime, overloaded"
#Airplains arrive too freequent, holding queue blows up (interArrivalTime > landingTime + takeoffTime)
#Constraint expression, cfr. OMNeT++ 5.5 Manual (9.4.5 Constraint Expression)
constraint = ($iat) < ($lt) + ($tot)

[Config ExponentialRegimeOverloaded]
extends = ExponentialRegime
description = "Exponential regime, overloaded"
constraint = ($iat) < ($lt) + ($tot)

[Config DeterministicRegimeBalanced]
extends = DeterministicRegime
description = "Deterministic regime, balanced"
constraint = ($iat) = ($lt) + ($tot)

[Config ExponentialRegimeBalanced]
extends = ExponentialRegime
description = "Exponential regime, balanced"
constraint = ($iat) = ($lt) + ($tot)

[Config Random_Balanced_Stub] #(For testing purposes, old Config Random_Balanced_10_5_5_J)
#-------------------------------------------------------------------------------------
#Random Interarrivals
**.airspace.isInterArrivalTimeRandom = true
**.airspace.isLandingTimeRandom = true
**.parkingarea.isParkingTimeRandom = true
**.parkingarea.isTakeoffTimeRandom = true

#Balanced Times (interArrivalTime >= landingTime + takeoffTime) (in this case at the stability limit)
**.airspace.interArrivalTime = 10
**.airspace.landingTime = 5
**.parkingarea.takeoffTime = 5

#Parking Time (jolly)
**.parkingarea.parkingTime=${1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}
#**.parkingarea.parkingTime = 10
#-------------------------------------------------------------------------------------
